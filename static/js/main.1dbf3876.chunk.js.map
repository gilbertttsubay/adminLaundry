{"version":3,"sources":["assets/logo.png","config/firebase/firebase.js","config/firebase/firebaseContext.js","ConstantComponent/template/menu/index.js","store/action/authAction.js","ConstantComponent/Header/index.js","pages/Order/incoming/index.js","pages/Order/index.js","pages/Login/index.js","pages/User/index.js","pages/Home/index.js","ConstantComponent/Body/index.js","App.js","serviceWorker.js","store/reducer/authReducer.js","store/reducer/index.js","store/index.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","Firebase","adminsDb","db","collection","usersDb","transactionDb","loginFirebaseUser","user","auth","signInWithEmailAndPassword","email","password","logoutFirebaseUser","signOut","app","initializeApp","this","fieldValue","firestore","FieldValue","FirebaseContext","React","createContext","Menu","to","props","link","onClick","className","label","Component","setLogin","userData","type","payload","Header","logoutHandler","firebase","doLogout","then","alert","catch","err","console","log","message","state","isLogin","Container","Row","Col","xs","sm","md","Image","src","logo","alt","fluid","span","offset","connect","userOnLogin","authReducer","dispatch","IncomingOrder","acceptanceHandler","data","orderID","username","status","doc","update","order","JSON","stringify","item_weigh","cost","service","duration","window","location","reload","error","renderOrder","index","id","values","obj","parse","key","Button","orderList","get","snapshot","collections","orderLists","forEach","push","setState","i","length","Table","striped","bordered","hover","size","map","Order","activeTab","handleTab","bind","selectedTab","Tabs","activeKey","onSelect","Tab","eventKey","title","Consumer","Login","LoginForm","setValue","el","name","value","loginHandler","doLogin","res","uid","placeholder","onChange","target","User","renderPlayer","player","position","team","userList","photo","alamat","Home","Body","exact","path","App","Boolean","hostname","match","initialState","AuthReducer","action","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dbf3876.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.69029720.png\";","import app from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET\r\n}\r\n\r\nclass Firebase {\r\n    constructor() {\r\n        app.initializeApp(firebaseConfig) // inisialisasi config firebase\r\n        this.auth = app.auth() // inisialisasi authorization \r\n\r\n        // For Firestore\r\n        this.fieldValue = app.firestore.FieldValue;\r\n        this.db = app.firestore();\r\n    }\r\n\r\n    // memanggil data Admins, Users dan transaksi di cloud firestore\r\n    adminsDb = () => this.db.collection(\"admins\")\r\n    usersDb = () => this.db.collection(\"customers\")\r\n    transactionDb = () => this.db.collection(\"transactions\")\r\n\r\n    // Login with email and password\r\n    loginFirebaseUser = (user) => {\r\n        return this.auth.signInWithEmailAndPassword(user.email, user.password)\r\n    }\r\n\r\n    // Logout user\r\n    logoutFirebaseUser = () => this.auth.signOut()\r\n}\r\n\r\nexport default Firebase","import React from \"react\"\r\n\r\nconst FirebaseContext = React.createContext(null)\r\nexport default FirebaseContext","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Menu extends Component {\r\n    render() { \r\n        return (  \r\n            <NavLink to={this.props.link} onClick={this.props.onClick}>\r\n                <div className=\"btn-menu\">{this.props.label}</div>\r\n            </NavLink>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Menu;","export const setLogin = (userData) => {\r\n    return {\r\n        type: 'LOGIN',\r\n        payload: userData\r\n    }\r\n}\r\n\r\nexport const setLogout = () => {\r\n    return {\r\n        type: 'LOGOUT'\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\r\nimport \"./header.css\";\r\n\r\nimport { Menu } from '../template';\r\nimport { connect } from \"react-redux\"\r\nimport { setLogout } from \"../../store/action/authAction\"\r\nimport logo from '../../assets/logo.png';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  logoutHandler = () => {\r\n    const { logoutFirebaseUser } = this.props.firebase\r\n    const { doLogout } = this.props\r\n\r\n    logoutFirebaseUser()\r\n        .then(() => {\r\n            doLogout()\r\n            alert(\"Logout Success\")\r\n        })\r\n        .catch( err => {\r\n            alert(err.type)\r\n            console.log(err.message)\r\n        })\r\n  }\r\n\r\n  render() {\r\n\r\n    const { isLogin } = this.props\r\n\r\n    return (\r\n      <Container>\r\n        <Row className=\"container-list\">\r\n          <Col className=\"container-logo\" xs={12} sm ={12} md={2}>\r\n            <Image className=\"logo\" src={logo} alt=\"Logo\" fluid />\r\n          </Col>\r\n\r\n          {\r\n            isLogin ? (\r\n              <Col className=\"container-menu\" xs={12} sm ={12} md={{span:4, offset:7}}>\r\n                  <Menu \r\n                    link=\"/admin/order\"\r\n                    label=\"Order\" \r\n                  />\r\n                  <Menu \r\n                    link=\"/admin/userlist\" \r\n                    label=\"User\" \r\n                  />\r\n                  <Menu \r\n                    link=\"/\"\r\n                    label=\"Logout\" \r\n                    onClick={this.logoutHandler}\r\n                  />\r\n              </Col>\r\n              ):\r\n                (\r\n                  <Col className=\"container-menu\" xs={12} sm ={12} md={{span:2, offset:8}}>\r\n                  <Menu \r\n                    link=\"/\" \r\n                    label=\"Home\" \r\n                  />\r\n                  <Menu \r\n                    link=\"/login\" \r\n                    label=\"Login\" \r\n                  />\r\n                  </Col>  \r\n                ) \r\n          }\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userOnLogin : state.authReducer.userOnLogin,\r\n  isLogin : state.authReducer.isLogin\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  doLogout: () => dispatch(setLogout())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import React, { Component } from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n\r\nclass IncomingOrder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collection: [],\r\n      orderList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const { transactionDb } = this.props.firebase\r\n\r\n    transactionDb()\r\n      .get()\r\n      .then((snapshot) => {\r\n        let collections = [];\r\n        let orderLists = [];\r\n\r\n        snapshot.forEach((doc) => {\r\n          let data = doc.id;\r\n          collections.push(data);  \r\n        });\r\n        this.setState({\r\n          collection: collections,\r\n        });\r\n        // console.log(this.state.collection);\r\n\r\n        for(let i = 0; i < this.state.collection.length; i++) {\r\n          transactionDb()\r\n            .doc(`${this.state.collection[i]}`)\r\n            .collection('orders')\r\n            .get()\r\n            .then((snapshot) => {\r\n              snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                data[\"orderID\"]=doc.id\r\n                data[\"username\"]=this.state.collection[i]\r\n                orderLists.push(data);  \r\n              });\r\n              this.setState({\r\n                orderList: orderLists,\r\n              });\r\n            })    \r\n        }\r\n        console.log(this.state.orderList);\r\n      })\r\n      .catch((error) => console.log(error));\r\n      \r\n  }\r\n\r\n  acceptanceHandler = (data, orderID, username) => {\r\n    const { transactionDb } = this.props.firebase\r\n    \r\n    // console.log(orderID[0]);\r\n    if(data.status === \"pending\") {\r\n      transactionDb()\r\n        .doc(username)\r\n        .collection('orders')\r\n        .doc(orderID)\r\n        .update({\r\n          order:JSON.stringify({item_weigh: data.item_weigh,cost: data.cost,service: data.service,duration: data.duration,status:\"diproses\"\r\n        })})\r\n        .then(\r\n          window.location.reload()\r\n        )\r\n        .catch((error) => console.log(error))\r\n\r\n    } else if(data.status === \"diproses\") {\r\n\r\n      transactionDb()\r\n        .doc(username)\r\n        .collection('orders')\r\n        .doc(orderID)\r\n        .update({\r\n          order:JSON.stringify({item_weigh: data.item_weigh,cost: data.cost,service: data.service,duration: data.duration,status:\"selesai\"\r\n        })})\r\n        .then(\r\n          window.location.reload()\r\n        )\r\n        .catch((error) => console.log(error))\r\n    }\r\n  }\r\n\r\n  renderOrder = (order, index) => {\r\n    //ambil value orderID dan username\r\n    let id = order.orderID\r\n    let username = order.username\r\n    // console.log(key);\r\n\r\n    //ambil string values order untuk di parsing ke object\r\n    let values = order.order\r\n    let obj = JSON.parse(values)\r\n    \r\n    if(obj.status === this.props.status) {\r\n      return (\r\n        <tr key={index}>\r\n          <td>{id}</td>\r\n          <td>{username}</td>\r\n          <td>{obj.item_weigh}</td>\r\n          <td>{obj.cost}</td>\r\n          <td>{obj.service}</td>\r\n          <td>{obj.duration}</td>\r\n          <td>{obj.cost*obj.item_weigh}</td>\r\n          <td>{obj.status}</td>\r\n        {\r\n          (this.props.status === \"pending\") ? (\r\n            <td>\r\n              <Button onClick={() => this.acceptanceHandler(obj, id, order.username)}>\r\n                Accept\r\n              </Button>\r\n            </td>\r\n          ) : (this.props.status === \"diproses\") ? (\r\n            <td>\r\n              <Button onClick={() => this.acceptanceHandler(obj, id, order.username)}>\r\n                Selesai\r\n              </Button>\r\n            </td>\r\n          ) : (\r\n            <td>\r\n              Order Selesai\r\n            </td>\r\n          )\r\n        }\r\n        </tr>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Order ID</th>\r\n              <th>Username</th>\r\n              <th>Berat Item</th>\r\n              <th>Biaya</th>\r\n              <th>Jenis Layanan</th>\r\n              <th>Durasi</th>\r\n              <th>Total Biaya</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.state.orderList.map(this.renderOrder)}</tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IncomingOrder;\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\n\r\nimport IncomingOrder from './incoming'\r\n\r\nimport { FirebaseContext } from '../../config/firebase';\r\n\r\n\r\nclass Order extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: \"incoming\"\r\n        }\r\n\r\n        this.handleTab = this.handleTab.bind(this);\r\n    }\r\n\r\n    handleTab(selectedTab) {\r\n\r\n        this.setState(() => ({\r\n          activeTab: selectedTab\r\n        }));\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <Tabs       \r\n                    id=\"order-tab\"\r\n                    activeKey={this.state.activeTab}\r\n                    onSelect={this.handleTab}\r\n                >\r\n                    <Tab eventKey=\"incoming\" title=\"Incoming Order\">\r\n                        <FirebaseContext.Consumer>\r\n                            {firebase => <IncomingOrder {...this.props} firebase={firebase} status=\"pending\" />}\r\n                        </FirebaseContext.Consumer>\r\n                    </Tab>    \r\n                    <Tab eventKey=\"ongoing\" title=\"Ongoing Order\">\r\n                        <FirebaseContext.Consumer>\r\n                            {firebase => <IncomingOrder {...this.props} firebase={firebase} status=\"diproses\" />}\r\n                        </FirebaseContext.Consumer>\r\n                    </Tab>    \r\n                    <Tab eventKey=\"history\" title=\"Order History\">\r\n                        <FirebaseContext.Consumer>\r\n                            {firebase => <IncomingOrder {...this.props} firebase={firebase} status=\"selesai\" />}\r\n                        </FirebaseContext.Consumer>\r\n                    </Tab>    \r\n                </Tabs>\r\n            </div>    \r\n        );\r\n    }\r\n}\r\n\r\n \r\nexport default Order;","import React, { Component } from 'react';\r\nimport './login.css'\r\n\r\nimport { setLogin } from \"../../store/action/authAction\"\r\nimport { connect } from \"react-redux\"\r\nimport FirebaseContext from \"../../config/firebase/firebaseContext\"\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super()\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FirebaseContext.Consumer>\r\n                {firebase => <LoginForm {...this.props} firebase={firebase} />}\r\n            </FirebaseContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n\r\n    setValue = (el) => {\r\n        this.setState({\r\n            [el.name]: el.value\r\n        })\r\n    }\r\n\r\n    loginHandler = () => {\r\n        const { email, password } = this.state\r\n        const { doLogin } = this.props\r\n        const { loginFirebaseUser, usersDb } = this.props.firebase\r\n        \r\n        if (email === \"\") {return alert(\"Email Harus diisi!\")}\r\n        else if (password === \"\") {return alert(\"Password Harus diisi!\")}\r\n\r\n        loginFirebaseUser({email, password}) \r\n            .then( res => {\r\n                if (res.user) {\r\n                    // console.log(res.user.uid);\r\n                    usersDb().doc(res.user.uid).get()\r\n                        .then( userOnLogin => {\r\n                            doLogin({...userOnLogin.data(), uid: res.user.uid})\r\n                        })\r\n                        .then(() => {\r\n                            window.location.reload()\r\n                        })   \r\n                    alert(\"Login Success\")\r\n                }\r\n            })            \r\n            .catch( err => {\r\n                console.error(err)\r\n                alert(err.message)\r\n            })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"container-page\">\r\n                <div className=\"container-login\">\r\n                    <h2> Login </h2>\r\n                    <div className=\"container-input\">\r\n                        <input \r\n                            className=\"input\" \r\n                            placeholder=\"Input your Username\" \r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={(el) => this.setValue(el.target)}\r\n                        />\r\n\r\n                        <input \r\n                            className=\"input\" \r\n                            placeholder=\"Input your Password\" \r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={(el) => this.setValue(el.target)}\r\n                        />\r\n                    </div>\r\n                \r\n        \r\n                <div className=\"btn-container\">\r\n                    <button className=\"buttonLogin\" onClick={this.loginHandler}>\r\n                        <span className=\"wordLogin\">Login</span>\r\n                    </button>\r\n                </div>\r\n                </div>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n \r\nconst mapDispatchToProps = (dispatch) => ({\r\n    doLogin: (user) => dispatch(setLogin(user))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Login)","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\n\r\nimport './user.css'\r\n\r\n// const players = [\r\n//   { userId: \"Forward\", username: \"Lebron\", alamat: \"Lakers\" },\r\n//   { userId: \"Guard\", username: \"Curi\", alamat: \"Lakers\" },\r\n//   { userId: \"Small Forward\", username: \"Ronaldinho\", alamat: \"Lakers\" },\r\n//   { userId: \"Center Back\", username: \"Arsene Wenger\", alamat: \"Lakers\" },\r\n// ];\r\n\r\nclass User extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n   \r\n    const { usersDb } = this.props.firebase\r\n    console.log(usersDb);\r\n\r\n    usersDb()\r\n      .get()\r\n      .then((snapshot) => {\r\n        let userList = [];\r\n\r\n        snapshot.forEach((doc) => {\r\n          let data = doc.data();\r\n          userList.push(data);\r\n        });\r\n\r\n        this.setState({\r\n          userList: userList,\r\n        });\r\n        // console.log(snapshot);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  renderPlayer = (player, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{player.position}</td>\r\n        <td>{player.name}</td>\r\n        <td>{player.team}</td>\r\n      </tr>\r\n    );\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactBootStrap.Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>Username</th>\r\n              <th>Email</th>\r\n              <th>Alamat</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.userList.map((data) => {\r\n              return (\r\n                <tr>\r\n                  <td>\r\n                    <img className=\"avatar\" src={data.photo} alt=\"avatar\" /> \r\n                  </td>\r\n                  <td>{data.name}</td>\r\n                  <td>{data.email}</td>\r\n                  <td>{data.alamat}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </ReactBootStrap.Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"container-page\">\r\n                <h2>Clean Laundry</h2>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport { \r\n    Switch, \r\n    Route, \r\n    Redirect \r\n} from 'react-router-dom';\r\n\r\nimport { Order, Login, User, Home } from '../../pages';\r\nimport { connect } from \"react-redux\"\r\nimport { setLogin } from \"../../store/action/authAction\"\r\nimport { FirebaseContext } from '../../config/firebase'\r\n\r\nclass Body extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n\r\n    render() { \r\n\r\n        const { isLogin } = this.props\r\n        \r\n\r\n        return ( \r\n            // <Header />\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    {/* <Login /> */}\r\n                    {\r\n                        (isLogin) ? (\r\n                            <Redirect to=\"/admin/order\" />\r\n                        ) : \r\n                           <Home />\r\n                    }\r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    {/* <Login /> */}\r\n                    {\r\n                        (isLogin) ? (\r\n                            <Redirect to=\"/admin/order\" />\r\n                        ) : \r\n                           <Login />\r\n                    }\r\n                </Route>\r\n                <Route path=\"/admin/order\">\r\n                    {/* <Home /> */}\r\n                    {\r\n                        (isLogin) ? (\r\n                            <Order />\r\n                        ) : \r\n                            <Redirect to=\"/\" />\r\n                    }\r\n                </Route>\r\n                <Route path=\"/admin/userlist\">\r\n                    {/* <Home /> */}\r\n                    {\r\n                        (isLogin) ? (\r\n                            <FirebaseContext.Consumer>\r\n                                {firebase => <User {...this.props} firebase={firebase} />}\r\n                            </FirebaseContext.Consumer>\r\n                        ) : \r\n                            <Redirect to=\"/\" />\r\n                    }\r\n                </Route>\r\n            </Switch>\r\n         );\r\n    }\r\n}\r\n \r\nconst mapStateToProps = (state) => ({\r\n    userOnLogin : state.authReducer.userOnLogin,\r\n    isLogin : state.authReducer.isLogin\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    doLogin: (user) => dispatch(setLogin(user)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Body)","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { FirebaseContext } from './config/firebase';\r\n\r\nimport \"./App.css\";\r\n\r\nimport { Header, Body } from \"../src/ConstantComponent\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <FirebaseContext.Consumer>\r\n          {firebase => <Header firebase={firebase} />}\r\n        </FirebaseContext.Consumer>   \r\n        <FirebaseContext.Consumer>\r\n          {firebase => <Body firebase={firebase} />}\r\n        </FirebaseContext.Consumer>   \r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState =  {\r\n    userOnLogin: null,\r\n    isLogin: false\r\n}\r\n\r\nexport const AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {\r\n                userOnLogin: action.payload,\r\n                isLogin: true\r\n            }\r\n\r\n        case 'LOGOUT':\r\n            return {\r\n                userOnLogin: null,\r\n                isLogin: false\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AuthReducer","import AuthReducer from './authReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer: AuthReducer,\r\n})\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from './reducer';\r\n\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\nconst store = createStore(persistedReducer)\r\nconst persistor = persistStore(store)\r\n\r\nexport { store, persistor }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from './store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Firebase, FirebaseContext } from \"./config/firebase\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <FirebaseContext.Provider value={new Firebase()}>\r\n          <App />\r\n        </FirebaseContext.Provider>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}